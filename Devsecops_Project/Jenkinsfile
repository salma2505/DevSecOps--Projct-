pipeline {
    agent any

    environment {
        SONARQUBE = 'sonarqube'
        SLACK_WEBHOOK = credentials('slack_url')
        SNYK_TOKEN = credentials('snyk-token')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'github-creds', url: 'https://github.com/salma2505/DevSecOps--Projct-.git'
            }
        }
         /*
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONARQUBE}") {
                    withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_AUTH_TOKEN')]) {
                        dir('Devsecops_Project/App_code/IncidentManager') {
                            script {
                                try {
                                    sh '''
                                        
                                        npx sonar-scanner \
                                          -Dsonar.projectKey=Project \
                                          -Dsonar.sources=. \
                                          -Dsonar.host.url=$SONAR_HOST_URL \
                                          -Dsonar.token=$SONAR_AUTH_TOKEN \
                                          -Dsonar.javascript.node.maxspace=1024
                                    '''
                                    sh """
                                        curl -X POST -H 'Content-type: application/json' --data '{
                                            "channel": "#devsecops",
                                            "text": "‚úÖ SonarQube analysis completed successfully!"
                                        }' ${SLACK_WEBHOOK}
                                    """
                                } catch (err) {
                                    sh """
                                        curl -X POST -H 'Content-type: application/json' --data '{
                                            "channel": "#devsecops",
                                            "text": "‚ùå SonarQube analysis failed: ${err}"
                                        }' ${SLACK_WEBHOOK}
                                    """
                                }
                            }
                        }
                    }
                }
            }
        }*/
     
stage('Snyk Vulnerability Scan') {
    steps {
        dir('Devsecops_Project/App_code/IncidentManager') {
            withCredentials([
                string(credentialsId: 'snyk-token', variable: 'SNYK_TOKEN'),
                string(credentialsId: 'slack-bot-token', variable: 'SLACK_TOKEN')
            ]) {
                script {
                    try {
                        // Installer Snyk localement
                        sh 'npm install snyk'

                        // Ex√©cuter le scan Snyk et sauvegarder le r√©sultat
                        def snykStatus = sh(
                            script: """
                                export SNYK_TOKEN=${SNYK_TOKEN}
                                npx snyk test --json > snyk-scan-results.json
                            """,
                            returnStatus: true
                        )

                        if (snykStatus != 0) {
                            echo "‚ö†Ô∏è Snyk a d√©tect√© des vuln√©rabilit√©s (status code ${snykStatus})"
                        }

                        // V√©rification que le fichier a √©t√© g√©n√©r√©
                        sh "ls -lh snyk-scan-results.json"
                        sh "head -n 20 snyk-scan-results.json"

                        // Envoyer le rapport JSON dans Slack
                        sh """
                            curl -F file=@snyk-scan-results.json \
                                 -F "initial_comment=üßæ Rapport Snyk JSON" \
                                 -F channels=#devsecops \
                                 -H "Authorization: Bearer ${SLACK_TOKEN}" \
                                 https://slack.com/api/files.upload
                        """

                        // Message Slack de succ√®s
                        sh """
                            curl -X POST -H 'Content-type: application/json' --data '{
                                "channel": "#devsecops",
                                "text": "‚úÖ Snyk scan termin√©. Rapport attach√© au message."
                            }' '${SLACK_WEBHOOK}'
                        """

                    } catch (err) {
                        echo "Erreur pendant le scan Snyk : ${err}"

                        // Message Slack d'√©chec
                        sh """
                            curl -X POST -H 'Content-type: application/json' --data '{
                                "channel": "#devsecops",
                                "text": "‚ùå Snyk scan failed. V√©rifiez les logs Jenkins pour plus de d√©tails."
                            }' '${SLACK_WEBHOOK}'
                        """
                        error("Snyk scan failed")
                    }
                }
            }
        }
    }
}


        /*
        stage('Build Docker Image') {
            steps {
                dir('Devsecops_Project') {
                    sh 'docker build -t salma2505/incidentshield:latest -f Pipeline_CI_CD/Dockerfile .'
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push salma2505/incidentshield:latest
                    '''
                }
            }
        }
     
        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-host-to-vm', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        env.KUBECONFIG = KUBECONFIG_FILE
                        sh 'kubectl apply -f Devsecops_Project/Pipeline_CI_CD/kubernetes/deployment_k8s/'
                    }
                }
            }
        }*/
        /*
        stage('OWASP ZAP Scan') {
            steps {
                script {
                    def zap = docker.image('ghcr.io/zaproxy/zaproxy:stable')
                    zap.pull()
                    zap.inside("-v ${pwd()}:/zap/wrk --network=host -u root") {
                        sh 'chmod -R 777 /zap/wrk'
                        sh 'zap-baseline.py -t http://192.168.159.128:30003 -r zap-report.html || true'
                    }
                }
            }
        }*/
    }  
    post{
        always{
          
            archiveArtifacts artifacts: 'Devsecops_Project/App_code/IncidentManager/snyk-scan-results.json', allowEmptyArchive: true
        }
    }
    
   /*
    post {
        always {
            archiveArtifacts artifacts: 'zap-report.html',fingerprint: true
            script {

                def zapReportUrl = "http://192.168.159.128:8080/job/${env.JOB_NAME}/${env.BUILD_NUMBER}/artifact/zap-report.html"
                def slackMessage = """
üîê *Rapport OWASP ZAP ‚Äì ${env.JOB_NAME} #${env.BUILD_NUMBER}*
<${zapReportUrl}|üìÑ Voir le rapport complet>

                """.stripIndent()

                sh """
                    curl -X POST -H 'Content-type: application/json' --data '{
                        "channel": "#devsecops",
                        "text": "${slackMessage}"
                    }' ${SLACK_WEBHOOK}
                """
            }
        }
    }*/
}

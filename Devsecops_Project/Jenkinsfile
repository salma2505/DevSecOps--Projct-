pipeline {
    agent any

    environment {
        SONARQUBE = 'sonarqube'  
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'github-creds', url: 'https://github.com/salma2505/DevSecOps--Projct-.git'
            }
        }
        //sonar stage
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_AUTH_TOKEN')]) {
                        script{
                            dir('Devsecops_Project/App_code/IncidentManager') {
                                 sh '''
                                      npm install                  
                                      npx sonar-scanner \
                                          -Dsonar.projectKey=incident-manager\
                                          -Dsonar.sources=. \
                                          -Dsonar.host.url=$SONAR_HOST_URL \
                                          -Dsonar.login=$SONAR_AUTH_TOKEN
                                 '''
                            }
                        }
                    }
                }
            }
        }    
        //snyk stage 
        stage('Snyk Vulnerability Scan') {
            steps {
                script {
                    sh 'npm install'
                    sh 'snyk test --all-projects'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('Devsecops_Project') {
                    sh 'docker build -t salma2505/incidentshield:latest -f Pipeline_CI_CD/Dockerfile .'
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push salma2505/incidentshield:latest
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-host-to-vm', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        env.KUBECONFIG = KUBECONFIG_FILE
                        sh 'kubectl apply -f Devsecops_Project/Pipeline_CI_CD/kubernetes/'
                    }
                }
            }
        }
    }
}

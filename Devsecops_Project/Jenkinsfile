pipeline {
    agent any

    environment {
        SONARQUBE = 'sonarqube'
        SLACK_WEBHOOK = credentials('slack_url')
        SNYK_TOKEN = credentials('snyk-token')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'github-creds', url: 'https://github.com/salma2505/DevSecOps--Projct-.git'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                dir('Devsecops_Project/App_code/IncidentManager') {
                    sh 'npm ci'
                }
            }
        }
         /*
        stage('Static & Dependency Scans') {
            parallel {
                stage('SonarQube Analysis') {
                    steps {
                        withSonarQubeEnv("${SONARQUBE}") {
                            withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_AUTH_TOKEN')]) {
                                dir('Devsecops_Project/App_code/IncidentManager') {
                                    script {
                                        try {
                                            sh '''
                                                npx sonar-scanner \
                                                  -Dsonar.projectKey=Project \
                                                  -Dsonar.sources=. \
                                                  -Dsonar.host.url=$SONAR_HOST_URL \
                                                  -Dsonar.token=$SONAR_AUTH_TOKEN
                                            '''
                                        } catch (err) {
                                            error("‚ùå √âchec de l'analyse SonarQube : ${err}")
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                stage('Snyk Vulnerability Scan') {
                    steps {
                        dir('Devsecops_Project/App_code/IncidentManager') {
                            withCredentials([string(credentialsId: 'snyk-token', variable: 'SNYK_TOKEN')]) {
                                script {
                                    try {
                                        sh '''
                                            export SNYK_TOKEN=$SNYK_TOKEN
                                            npx snyk test --json > snyk-scan-results.json || true
                                        '''
                                    } catch (err) {
                                        echo "‚ö†Ô∏è Snyk a d√©tect√© des vuln√©rabilit√©s : ${err}"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
       
        stage('Build Docker Image') {
            steps {
                dir('Devsecops_Project') {
                    sh 'docker build -t salma2505/node-app:latest -f Pipeline_CI_CD/Dockerfile .'
                }
            }
        }*/
       
        stage('Push to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push salma2505/node-app:latest
                    '''
                }
            }
        }
       /*
        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-host-to-vm', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        env.KUBECONFIG = KUBECONFIG_FILE
                        sh 'kubectl apply -f Devsecops_Project/Pipeline_CI_CD/kubernetes/'
                    }
                }
            }
        }

        stage('OWASP ZAP Scan') {
            steps {
                script {
                    def zap = docker.image('ghcr.io/zaproxy/zaproxy:stable')
                    zap.pull()
                    zap.inside("-v ${pwd()}:/zap/wrk --network=host -u root") {
                        sh '''
                            chmod -R 777 /zap/wrk
                            zap-full-scan.py -t http://192.168.1.5:30006 -r zap-report.html -m 2 || true
                            cp /zap/wrk/zap-report.html Devsecops_Project/App_code/IncidentManager/
                        '''
                    }
                }
            }
        }*/
    }

    post {
        always {
            //archiver 
            archiveArtifacts artifacts: 'Devsecops_Project/App_code/IncidentManager/*.json', fingerprint: true
            archiveArtifacts artifacts: 'Devsecops_Project/App_code/IncidentManager/zap-report.html', fingerprint: true

           
            script {
                def buildUrl = "http://localhost:8080/jenkins/job/${env.JOB_NAME}/${env.BUILD_NUMBER}/artifact/Devsecops_Project/App_code/IncidentManager"

                def message = """
üõ°Ô∏è *Rapports de S√©curit√© ‚Äì ${env.JOB_NAME} #${env.BUILD_NUMBER}*

‚Ä¢ üîç [SonarQube] : Analyse r√©alis√©e
‚Ä¢ üì¶ [Snyk] : <${buildUrl}/snyk-scan-results.json|Voir JSON>
‚Ä¢ üåê [ZAP] : <${buildUrl}/zap-report.html|Voir rapport ZAP>

‚úÖ Fin du pipeline.
                """.stripIndent()

                sh """
                    curl -X POST -H 'Content-type: application/json' --data '{
                        "channel": "#devsecops-pipeline",
                        "text": "${message}"
                    }' ${SLACK_WEBHOOK}
                """
            }
        }
    }
}


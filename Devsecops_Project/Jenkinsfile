pipeline {
    agent any

    environment {
        SONARQUBE = 'sonarqube'
        SLACK_WEBHOOK = credentials('slack_url') // Use the webhook URL from Jenkins credentials
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'github-creds', url: 'https://github.com/salma2505/DevSecOps--Projct-.git'
            }
        }

        stage('Check for Secrets with GitLeaks') {
            steps {
                script {
                    try {
                        // Run GitLeaks to scan for secrets
                        sh 'gitleaks --path=. --config-path=.gitleaks.toml --report=gitleaks-report.json'
                        
                        // Read the report to check for secrets
                        def secretsFound = readFile('gitleaks-report.json')
                        
                        // If secrets are found, notify via Webhook
                        if (secretsFound.contains('SECRET DETECTED')) {
                            sh """
                                curl -X POST -H 'Content-type: application/json' --data '{
                                    "channel": "#devsecops",
                                    "text": "❌ Secrets detected in the codebase! Please review the Gitleaks report."
                                }' $SLACK_WEBHOOK
                            """
                        } else {
                            sh """
                                curl -X POST -H 'Content-type: application/json' --data '{
                                    "channel": "#devsecops",
                                    "text": "✅ No secrets detected in the codebase."
                                }' $SLACK_WEBHOOK
                            """
                        }
                    } catch (err) {
                        sh """
                            curl -X POST -H 'Content-type: application/json' --data '{
                                "channel": "#devsecops",
                                "text": "❌ Error during secret scanning: ${err}"
                            }' $SLACK_WEBHOOK
                        """
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_AUTH_TOKEN')]) {
                        script {
                            dir('Devsecops_Project/App_code/IncidentManager') {
                                try {
                                    sh '''
                                        npm install                  
                                        npx sonar-scanner \
                                            -Dsonar.projectKey=Project \
                                            -Dsonar.sources=. \
                                            -Dsonar.host.url=$SONAR_HOST_URL \
                                            -Dsonar.login=$SONAR_AUTH_TOKEN \
                                            -Dsonar.javascript.node.maxspace=1024
                                    '''
                                    sh """
                                        curl -X POST -H 'Content-type: application/json' --data '{
                                            "channel": "#devsecops",
                                            "text": "✅ SonarQube analysis completed successfully!"
                                        }' $SLACK_WEBHOOK
                                    """
                                } catch (err) {
                                    sh """
                                        curl -X POST -H 'Content-type: application/json' --data '{
                                            "channel": "#devsecops",
                                            "text": "❌ SonarQube analysis failed: ${err}"
                                        }' $SLACK_WEBHOOK
                                    """
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Snyk Vulnerability Scan') {
            steps {
                dir('Devsecops_Project/App_code/IncidentManager') {
                    script {
                        try {
                            // Run Snyk vulnerability test and output the results to JSON
                            sh 'snyk test --all-projects --json > snyk-report.json'
                            
                            // Read the Snyk report to check if vulnerabilities are found
                            def snykReport = readFile('snyk-report.json')
                            def snykResults = readJSON text: snykReport

                            // Check for vulnerabilities and alert via webhook
                            if (snykResults.vulnerabilities.size() > 0) {
                                def message = "❌ Snyk found vulnerabilities in the project! Please review the Snyk report."
                                sh """
                                    curl -X POST -H 'Content-type: application/json' --data '{
                                        "channel": "#devsecops",
                                        "text": "$message"
                                    }' $SLACK_WEBHOOK
                                """
                            } else {
                                def message = "✅ No vulnerabilities found in the project."
                                sh """
                                    curl -X POST -H 'Content-type: application/json' --data '{
                                        "channel": "#devsecops",
                                        "text": "$message"
                                    }' $SLACK_WEBHOOK
                                """
                            }
                        } catch (err) {
                            sh """
                                curl -X POST -H 'Content-type: application/json' --data '{
                                    "channel": "#devsecops",
                                    "text": "❌ Snyk scan failed: ${err}"
                                }' $SLACK_WEBHOOK
                            """
                        }
                    }
                }
            }
        }      

        stage('Build Docker Image') {
            steps {
                dir('Devsecops_Project') {
                    sh 'docker build -t salma2505/incidentshield:latest -f Pipeline_CI_CD/Dockerfile .'
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push salma2505/incidentshield:latest
                    '''
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-host-to-vm', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        env.KUBECONFIG = KUBECONFIG_FILE
                        sh 'kubectl apply -f Devsecops_Project/Pipeline_CI_CD/kubernetes/'
                    }
                }
            }
        }
    }
}
